# -*- coding: utf-8 -*-
"""Visualización Interactiva - TF info 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IpHyRNw3D6HV7At9RFsIGc13p-PVXJrY
"""

from PyQt5.QtWidgets import QMainWindow, QPushButton, QVBoxLayout, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import pandas as pd
import cv2

class Visualizador(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Visualizador Interactivo - BioApp")
        self.setGeometry(100, 100, 800, 600)

        self.canvas = FigureCanvas(Figure(figsize=(5, 3)))
        layout = QVBoxLayout()
        layout.addWidget(self.canvas)

        self.btn_imagen = QPushButton("Mostrar Imagen")
        self.btn_senal = QPushButton("Mostrar Señal")
        self.btn_csv = QPushButton("Mostrar Gráfico CSV")

        self.btn_imagen.clicked.connect(self.mostrar_imagen)
        self.btn_senal.clicked.connect(self.mostrar_senal)
        self.btn_csv.clicked.connect(self.mostrar_tabla)

        layout.addWidget(self.btn_imagen)
        layout.addWidget(self.btn_senal)
        layout.addWidget(self.btn_csv)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def mostrar_imagen(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        img = cv2.imread("data/ejemplo.png", cv2.IMREAD_GRAYSCALE)
        ax.imshow(img, cmap='gray')
        ax.set_title("Imagen PNG")
        self.canvas.draw()

    def mostrar_senal(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        t = np.linspace(0, 1, 500)
        senal = np.sin(2 * np.pi * 10 * t)
        ax.plot(t, senal)
        ax.set_title("Señal Simulada")
        ax.set_xlabel("Tiempo [s]")
        ax.set_ylabel("Amplitud")
        self.canvas.draw()

    def mostrar_tabla(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        df = pd.read_csv("data/ejemplo.csv")
        columna = df.columns[1]
        valores = df[columna].value_counts()
        ax.bar(valores.index, valores.values)
        ax.set_title(f"Distribución de '{columna}'")
        ax.set_ylabel("Frecuencia")
        self.canvas.draw()
# -*- coding: utf-8 -*-
"""VISUALIZACIÓN INTERACTIVA - TF info 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IpHyRNw3D6HV7At9RFsIGc13p-PVXJrY
"""

from PyQt5.QtWidgets import QMainWindow, QPushButton, QVBoxLayout, QWidget, QApplication
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import cv2
import sys

class Visualizador(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Visualizador Interactivo - BioApp")
        self.setGeometry(100, 100, 800, 600)

        self.canvas = FigureCanvas(Figure(figsize=(5, 3)))
        layout = QVBoxLayout()
        layout.addWidget(self.canvas)

        self.btn_imagen = QPushButton("Mostrar Imagen PNG")
        self.btn_senal = QPushButton("Mostrar Señal")
        self.btn_csv = QPushButton("Mostrar Gráfico CSV")

        self.btn_imagen.clicked.connect(self.mostrar_imagen)
        self.btn_senal.clicked.connect(self.mostrar_senal)
        self.btn_csv.clicked.connect(self.mostrar_csv)

        layout.addWidget(self.btn_imagen)
        layout.addWidget(self.btn_senal)
        layout.addWidget(self.btn_csv)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def mostrar_imagen(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        img = cv2.imread("Cromo.png", cv2.IMREAD_GRAYSCALE)
        if img is None:
            ax.text(0.5, 0.5, "No se encontró la imagen", ha='center')
        else:
            ax.imshow(img, cmap='gray')
            ax.set_title("Imagen PNG: Cromosomas")
        self.canvas.draw()

    def mostrar_senal(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        t = np.linspace(0, 1, 500)
        senal = np.sin(2 * np.pi * 10 * t)
        ax.plot(t, senal, label="Señal simulada")
        ax.set_title("Señal Simulada - Senoidal")
        ax.set_xlabel("Tiempo [s]")
        ax.set_ylabel("Amplitud")
        ax.legend()
        self.canvas.draw()

    def mostrar_csv(self):
        ax = self.canvas.figure.subplots()
        ax.clear()
        try:
            df = pd.read_csv("pacientes.csv") #AUN NO TENEMOS ARCHIVO CSV CON LISTA DE PACIENTES
            conteo = df["Grupo"].value_counts()
            ax.bar(conteo.index, conteo.values, color=['#1f77b4', '#ff7f0e', '#2ca02c'])
            ax.set_title("Distribución de Pacientes por Grupo")
            ax.set_xlabel("Grupo")
            ax.set_ylabel("Cantidad de Pacientes")
        except Exception as e:
            ax.text(0.5, 0.5, f"Error al leer CSV: {e}", ha='center')
        self.canvas.draw()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ventana = Visualizador()
    ventana.show()
    sys.exit(app.exec_())